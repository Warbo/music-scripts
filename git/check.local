#! /usr/bin/env nix-shell
#! nix-shell -i bash -p bash git2html parallel

echo "Putting hooks in place"
for repo in *.git
do
    if [ ! -h "$repo/hooks/post-receive" ]
    then
        (cd "$repo/hooks"
         ln -s ../../post-receive.hook post-receive)
    fi
done

echo "Checking connection to chriswarbo.net"
if ssh -q chriswarbo.net exit
then
    echo "Copying repos to chriswarbo.net"
    REMOTE=$(ssh chriswarbo.net "ls /opt/repos/")
    for repo in *.git
    do
        if ! echo "$REMOTE" | grep "^$repo$" > /dev/null
        then
            echo "Can't find $repo on remote server, copying..."
            tar c "$repo" | gzip - | ssh chriswarbo.net "cd /opt/repos; tar xz"
        fi
    done
fi

echo "Making sure local repos mirror origins"
for repo in *.git
do
    pushd "$repo" > /dev/null
    FORCE=0
    FETCH=$(git config --get remote.origin.fetch) || FORCE=1
    [[ "x$FETCH" = "x+refs/*:refs/*" ]]           || FORCE=1
    [[ "$FORCE" -eq 0 ]] || {
        echo "Forcing '$repo' to fetch everything from origin" >> /dev/stderr
        git config remote.origin.fetch "+refs/*:refs/*"
    }

    FORCE=0
    MIRROR=$(git config --get remote.origin.mirror) || FORCE=1
    [[ "x$FETCH" = "xtrue" ]]                       || FORCE=1
    [[ "$FORCE" -eq 0 ]] || {
        echo "Forcing '$repo' to be a mirror" >> /dev/stderr
        git config remote.origin.mirror true
    }
    popd > /dev/null
done

# Since these hooks will try pushing changes to remote repos, even if there are
# no changes it can still take a long time to wait for all of the connections to
# be established.
# By running in parallel, these waiting times can be overlapped, resulting in
# less idle time.
# However, we don't want to abuse remote services by attempting hundreds of
# simultaneous connections, so rather than forking with `&` we use `sem` from
# GNU parallel to prevent more than 8 tasks from running at once.
echo "Running hooks in parallel"
for repo in *.git
do
    pushd "$repo" > /dev/null
    chmod +x hooks/post-receive
    sem --will-cite -j 8 sh hooks/post-receive
    popd > /dev/null
done
sem --will-cite --wait

echo "Copying HTML to remote"
if ssh -q chriswarbo.net exit
then
    REMOTE=$(ssh chriswarbo.net "ls /opt/html/")
    for repo in *.git
    do
        NAME=$(basename "$repo" .git)
        if [ -d "../git-html/$NAME" ]
        then
            if ! echo "$REMOTE" | grep "^$NAME$" > /dev/null
            then
                echo "Can't find $NAME on remote server, copying..."
                (cd ../git-html
                 tar c "$NAME" | gzip - | ssh chriswarbo.net "cd /opt/html; tar xz")
            fi
        fi
    done
fi

echo "Running checks on remote"
ssh chriswarbo.net 'cd /opt/repos; sh check.sh'
