#!/usr/bin/env bash

function cbl2nix {
    if command -v cabal2nix > /dev/null
    then
        cabal2nix ./. "$@"
    else
        nix-shell -p cabal2nix --run "cabal2nix ./. $*"
    fi
}

function genDefault {
    DEF=$(cbl2nix) || {
        echo "Error: $DEF" >> /dev/stderr
        exit 1
    }
    echo "$DEF"
}

function genShell {
    cbl2nix --shell || {
        echo "Error generating shell.nix contents" 1>&2
        exit 1
    }
}

function writeFile {
    # Only write to existing files; dump any old content to stdout first
    if [[ -e "$1" ]]
    then
        echo "START $1"
        cat "$1"
        echo "END $1"
        echo "Generating $1"
        cat > "$1"
    fi
}

function haveTests {
    tr '[:upper:]' '[:lower:]' < *.cabal | grep "^\s*test-suite" > /dev/null
}

# Update any existing files
genDefault | writeFile "default.nix"
genShell   | writeFile "shell.nix"

# Coverage can cause instability, so only use it when opted in
if [[ -n "$COVERAGE" ]]
then
    COVERAGEOPT="--enable-coverage"
else
    COVERAGEOPT=""
fi

if haveTests
then
    CMD="cabal configure --enable-tests $COVERAGEOPT --enable-benchmarks -v"
else
    CMD="cabal configure --enable-benchmarks -v"
fi

SHELL=$(genShell)

if [[ -z "$PKGS" ]] && [[ -z "$COMPILER" ]]
then
    echo "Configuring package"
    if [[ -e "shell.nix" ]]
    then
        nix-shell --run "$CMD"
    else
        nix-shell -E "$SHELL" --run "$CMD"
    fi
else
    if [[ -e "shell.nix" ]]
    then
        SHELLEXPR="(import ./shell.nix)"
    else
        SHELLEXPR="($SHELL)"
    fi

    [[ -n "$PKGS"     ]] || PKGS="(import <nixpkgs> {})"
    [[ -n "$COMPILER" ]] || COMPILER="default"
    export COMPILER

    EXPR="with builtins;
          $SHELLEXPR {
            nixpkgs = ($PKGS);
            compiler = getEnv \"COMPILER\";
          }"
    echo -e "EXPR:\n\n$EXPR\n\n" 1>&2

    nix-shell --show-trace --run "$CMD" -E "$EXPR"
fi
