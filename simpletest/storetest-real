#!/usr/bin/env python

import math
import os
import subprocess
import sys

# TODO: Put these into a config file somewhere
store_location  = '/var/www/domains/wandisco.com/drupal7/htdocs'
result_location = '/tmp/test-results'
store_uri       = subprocess.Popen(
                      ['php',
                       '-r',
                       'require_once "' + \
                           store_location + '/sites/default/settings.php"; ' + \
                           'echo isset($base_url)? $base_url : "f";'],
                      stdout=subprocess.PIPE,
                      cwd=store_location).communicate()[0].strip()
if store_uri == 'f':
    print "Could not find $base_url"
    sys.exit(1)

def remove_previous(test=''):
    """Pass in a test's name to clear its previous debug output. Leave empty to
    clear all previous tests' output."""
    try:
        subprocess.check_output(
            ''.join(['rm ',
                     store_location,
                     '/sites/default/files/simpletest/verbose/',
                     test,
                     '*.html']),
            shell=True,
            stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError:
        # Files not found; good, we're deleting them anyway!
        pass

def command(classes=[], methods=[]):
    """Build test commands. Any given arguments will be appended to the
    commands."""

    if len(classes) == 0:
        raise Exception('Must have classes to test')
    if len(classes) > 1 and len(methods) > 0:
        raise Exception('Cannot test specific methods of multiple classes')

    if len(methods) > 0:
        # Divide up our methods across CPUs
        method_args = []
        for index, method in enumerate(methods):
            method_args.append([])
            method_args[index % cpus].append(method)
        return 'drush test-run '         + \
                   classes[0]            + \
                   ' --methods=testRun,' + \
                   ','.join(methods)     + \
                   ' --uri='             + \
                   store_uri             + \
                   ' --xml='             + \
                   result_location

    return 'drush test-run ' + \
           ','.join(classes) + \
           ' --uri=' + \
           store_uri + \
           ' --xml=' + \
           result_location

run = lambda cmd: subprocess.check_call(cmd,
                                        cwd=store_location,
                                        shell=True)

# Read our arguments
# TODO: Make this more generic; get WANdisco from a config file!
if len(sys.argv) < 2 or 'WANdisco' in sys.argv:
    # Run the whole WANdisco group
    tests = ['WANdisco']
    remove_previous()
else:
    # Run specific tests
    tests = sys.argv[1:]

tests = filter(lambda t: t != '-c', tests)

# Split apart whole groups/suites from specific methods
whole    = []
specific = []
for t in tests:
    {True:  specific,
     False: whole   }['::' in t].append(t)

# Clear caches, so any pending changes take effect
run('drush cc all')

# Run the whole groups/suites
if len(whole) > 0:
    map(remove_previous, whole)
    run(command(whole))

# Collect up specific methods
classes = {}
for (c, m) in [(s.split('::')[0], s.split('::')[1]) for s in specific]:
    if c not in classes:
        classes[c] = []
    if m not in classes[c]:
        classes[c].append(m)
map(remove_previous, classes.keys())
for c in classes:
    run(command([c], classes[c]))
