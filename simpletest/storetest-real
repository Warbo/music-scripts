#!/usr/bin/env python

import sys
import os
import subprocess

# TODO: Put these into a config file somewhere
store_location  = '/var/www/domains/wandisco.com/drupal7/htdocs'
store_uri       = 'http://debian'
result_location = '/home/chris/test-results'

def remove_previous(test=''):
    """Pass in a test's name to clear its previous debug output. Leave empty to
    clear all previous tests' output."""
    try:
        subprocess.check_output(
            ''.join(['rm ',
                     store_location,
                     '/sites/default/files/simpletest/verbose/',
                     test,
                     '*.html']),
            shell=True,
            stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError:
        # Files not found; good, we're deleting them anyway!
        pass

def command(classes=[], methods=[]):
    """Build a test command. Any given arguments will be appended to the
    command."""
    method_arg = {True:  ' --methods=testRun,' + ','.join(methods),
                  False: ''}[len(methods) > 0]
    
    return ''.join(['drush test-run ',
                    ','.join(classes),
                    ' --uri=',
                    store_uri,
                    ' --xml=',
                    result_location,
                    method_arg])

run = lambda cmd: subprocess.check_call(cmd, cwd=store_location, shell=True)

# Read our arguments
# TODO: Make this more generic; get WANdisco from a config file!
if len(sys.argv) < 2 or 'WANdisco' in sys.argv:
    # Run the whole WANdisco group
    tests = ['WANdisco']
    remove_previous()
else:
    # Run specific tests
    tests = sys.argv[1:]

# Split apart whole groups/suites from specific methods
whole    = []
specific = []
for t in tests:
    {True:  specific,
     False: whole   }['::' in t].append(t)

# Clear caches
run('drush cc all')

# Run the whole groups/suites
if len(whole) > 0:
    map(remove_previous, whole)
    run(command(whole))

# Collect up specific methods
classes = {}
for (c, m) in [(s.split('::')[0], s.split('::')[1]) for s in specific]:
    if c not in classes:
        classes[c] = []
    if m not in classes[c]:
        classes[c].append(m)
map(remove_previous, classes.keys())
for c in classes:
    run(command([c], classes[c]))
